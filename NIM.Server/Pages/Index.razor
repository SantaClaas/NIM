@page "/"
@using Models
@inject Rules rules
@inject NavigationManager navigationManager
@inject GameState gameState
@if (gameState.IsInitialized)
{
    <Nim />
}
else
{
    <div class="row justify-content-center">
        <div class="col col-lg-3 col-md-5 col-sm-10">
            <form>
                @for (int i = 0; i < PossiblePlayers.Count; ++i)
                {
                    <div class="form-group">
                        <PlayerSelector Number="i" Model="PossiblePlayers[i]" OnAiPlayerChange="OnAiPlayerChange" OnClick="OnClick" OnLevelChange="OnLevelChange" AddNew="AddNew" RemoveLatest="RemoveLatest"/>
                    </div>
                }
            </form>
            <button class="btn btn-primary" @onclick="@OnSubmit">Submit</button>
        </div>
    </div>
}
@code{
    private List<Player> ValidAiPlayers { get; set; }
    private List<PlayerSelectorModel> PossiblePlayers { get; set; }

    protected override void OnInitialized()
    {
        ValidAiPlayers = new List<Player>
{
        new AiPlayerFirst("Computer First"),
        new AiPlayerSimple("Computer Simple"),
        new AiPlayerRandom("Computer Random"),
        new AdvancedAiPlayer("Computer Advanced",0)
        };

        PossiblePlayers = Enumerable.Range(0, 2).Select(i => new PlayerSelectorModel
        {
            Number = i,
            IsAiPlayer = false,
            //Name = $"Player {i + 1}",
            SelectedAiPlayer = null,
            DifficultyAdvancedAi = 0f,
            ValidAiPlayers = ValidAiPlayers
        })
        .ToList();
    }

    void OnAiPlayerChange(AiPlayerChangeArgs e)
    {
        if (int.TryParse(e.ChangeEventArgs.Value as string, out int i))
        {
            PossiblePlayers[e.ModelNumber].SelectedAiPlayer = ValidAiPlayers[i] switch
            {
                AiPlayerFirst first => first,
                AiPlayerSimple simple => simple,
                AiPlayerRandom random => random,
                AdvancedAiPlayer _ => new AdvancedAiPlayer("Computer Advanced", PossiblePlayers[e.ModelNumber].DifficultyAdvancedAi),
                _ => new AiPlayerFirst("Computer")
            };
            AddNew(e.ModelNumber);
            this.StateHasChanged();
        }

    }

    void OnClick(int index)
    {
        PossiblePlayers[index].SelectedAiPlayer = PossiblePlayers[index].ValidAiPlayers[0];
        this.StateHasChanged();
    }

    void OnLevelChange(AiPlayerChangeArgs e)
    {
        if (float.TryParse(e.ChangeEventArgs.Value as string, out float newLevel)
            && PossiblePlayers[e.ModelNumber].SelectedAiPlayer is AdvancedAiPlayer advancedAiPlayer)
        {
            PossiblePlayers[e.ModelNumber].SelectedAiPlayer = new AdvancedAiPlayer(advancedAiPlayer.Name, newLevel);
        }
    }

    void OnSubmit()
    {
        var players = PossiblePlayers.Select(p => p.IsAiPlayer ? p.SelectedAiPlayer : new Human(p.Name ?? $"Player {p.Number}")).ToList();
        gameState.Game = new Game(rules, players);
        //navigationManager.NavigateTo("nim");
        // get move
        gameState.Game.Step();
    }


    void AddNew(int i)
    {
        if (i == PossiblePlayers.Count - 1 /*&& (!PossiblePlayers[i].IsAiPlayer || !string.IsNullOrWhiteSpace(PossiblePlayers[i].Name))*/)
        {
            PossiblePlayers.Add(new PlayerSelectorModel
            {

                Number = PossiblePlayers.Count,
                IsAiPlayer = false,
                //Name = $"Player {i + 1}",
                SelectedAiPlayer = null,
                DifficultyAdvancedAi = 0f,
                ValidAiPlayers = ValidAiPlayers
            });
            this.StateHasChanged();
        }

    }

    void RemoveLatest(int i)
    {
        if (i == PossiblePlayers.Count - 2)
            PossiblePlayers.RemoveAt(i);
        this.StateHasChanged();
    }
}
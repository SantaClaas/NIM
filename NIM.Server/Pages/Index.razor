@page "/"
@page "/index"
@using Models
@inject Rules rules
@inject NavigationManager navigationManager
@inject GameState gameState
@if (gameState.IsInitialized && gameState.Game.State == NIM.GameState.GameOver)
{
    <div class="alert alert-success">
        Congratulations @(string.Join(',', gameState.Game.GetWinningPlayers().Select(p => p.Name))) you won!
    </div>
}

<div class="row justify-content-center">
    <h1>New Game</h1>
</div>

<div class="row justify-content-center">
    <div class="col col-lg-3 col-md-5 col-sm-10">
        <form>
            @for (int i = 0; i < PossiblePlayers.Count; ++i)
            {
                <div class="form-group">
                    <PlayerSelector Number="i" Model="PossiblePlayers[i]" OnAiPlayerChange="OnAiPlayerChange" OnClick="OnClick" OnLevelChange="OnLevelChange" AddNew="AddNew" OnFocusOut="OnFocusOut" />
                </div>

            }
        </form>
        <button class="btn btn-success" @onclick="AddNew">Add Player</button>
        <button class="btn btn-danger" @onclick="RemoveLatest">Remove Player</button>
        <button class="btn btn-primary" @onclick="@OnSubmit"><i class="oi oi-media-play" /> Start </button>
    </div>
</div>

@code{
    private List<Player> ValidAiPlayers { get; set; }

    private List<PlayerSelectorModel> PossiblePlayers { get; set; }

    protected override void OnInitialized()
    {
        ValidAiPlayers = new List<Player> {
        new AiPlayerFirst($"Computer First"),
        new AiPlayerRandom($"Computer Random"),
        new AiPlayerMinMax($"Computer Advanced",0) };

        PossiblePlayers = Enumerable.Range(0, 2).Select(i => new PlayerSelectorModel
        {
            Number = i,
            IsAiPlayer = false,
            //Name = $"Player {i + 1}",
            SelectedAiPlayer = null,
            DifficultyAdvancedAi = 0f,
            ValidAiPlayers = ValidAiPlayers
        })
        .ToList();
    }
    void OnAiPlayerChange(AiPlayerChangeArgs e)
    {
        if (int.TryParse(e.ChangeEventArgs.Value as string, out int i))
        {
            PossiblePlayers[e.ModelNumber].SelectedAiPlayer = ValidAiPlayers[i] switch
            {
                AiPlayerFirst first => new AiPlayerFirst($"Player {i} ({first.Name})"),
                AiPlayerRandom random => new AiPlayerRandom($"Player {i} ({random.Name})"),
                AiPlayerMinMax _ => new AiPlayerMinMax("Computer Advanced", PossiblePlayers[e.ModelNumber].DifficultyAdvancedAi),
                _ => new AiPlayerFirst("Computer")
            };
            this.StateHasChanged();
        }

    }

    void OnClick(int index)
    {
        PossiblePlayers[index].SelectedAiPlayer = PossiblePlayers[index].ValidAiPlayers[0] switch
        {
            AiPlayerFirst first => new AiPlayerFirst($"Player {index} ({first.Name})"),
            AiPlayerRandom random => new AiPlayerRandom($"Player {index} ({random.Name})"),
            AiPlayerMinMax _ => new AiPlayerMinMax("Computer Advanced", PossiblePlayers[index].DifficultyAdvancedAi),
            _ => new AiPlayerFirst("Computer")
        };

        this.StateHasChanged();
    }

    void OnLevelChange(AiPlayerChangeArgs e)
    {
        if (float.TryParse(e.ChangeEventArgs.Value as string, out float newLevel)
            && PossiblePlayers[e.ModelNumber].SelectedAiPlayer is AiPlayerMinMax advancedAiPlayer)
        {
            PossiblePlayers[e.ModelNumber].SelectedAiPlayer = new AiPlayerMinMax(advancedAiPlayer.Name, newLevel);
        }
    }

    void OnSubmit()
    {
        var players = PossiblePlayers.Select(p => p.IsAiPlayer ? p.SelectedAiPlayer : new Human(p.Name ?? $"Player {p.Number + 1}")).ToList();

        gameState.Game = new Game(rules, players);
        navigationManager.NavigateTo("nim");
        // get move
        gameState.Game.Step();
    }



    void AddNew()
    {

        PossiblePlayers.Add(new PlayerSelectorModel
        {

            Number = PossiblePlayers.Count,
            IsAiPlayer = false,
            //Name = $"Player {i + 1}",
            SelectedAiPlayer = null,
            DifficultyAdvancedAi = 0f,
            ValidAiPlayers = ValidAiPlayers
        });
        this.StateHasChanged();


    }

    void RemoveLatest()
    {
        if (PossiblePlayers.Count == 2) return;
        PossiblePlayers.RemoveAt(PossiblePlayers.Count - 1);
        this.StateHasChanged();
    }

    void OnFocusOut(int i)
    {
        if (PossiblePlayers.Any(p => p.Name == PossiblePlayers[i].Name))
            PossiblePlayers[i].Name += $"(2)";
    }

}

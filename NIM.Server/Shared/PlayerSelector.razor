@using Models

@if (!Model.IsAiPlayer)
{
    <label for="@($"player{Model.Number + 1}Name")">@($"Player {Model.Number + 1}"):</label>
    <input type="text" class="form-control" id="@($"player{Model.Number + 1}Name")" placeholder="@($"Player {Model.Number + 1}")" disabled="@Model.IsAiPlayer" @bind="Model.Name" @onfocusout="() => OnFocusOut.InvokeAsync(Number)" />
}
else
{
    if (Model.SelectedAiPlayer is AiPlayerMinMax a)
    {
        <div class="row">
            <div class="col col-8">
                <label for="@($"difficulty{Number}")">Difficulty:</label>
                <select id="@($"difficulty{Number}")" class="form-control" @onchange="(e) => OnAiPlayerChange.InvokeAsync(new AiPlayerChangeArgs { ChangeEventArgs = e, ModelNumber = Number })">
                    @for (int i = 0; i < Model.ValidAiPlayers.Count; ++i)
                    {
                        <option value="@i" selected="@Selected(i)">@Model.ValidAiPlayers[i].Name</option>
                    }
                </select>
            </div>
            <div class="col col-4">
                <label for="@($"difficultyPlayer{Number}")">Level:</label>
                <input type="number" class="form-control" id="@($"difficultyPlayer{Number}")" max="1" min="-1" step="0.10" value="@Model.DifficultyAdvancedAi" @onchange="(e) => OnLevelChange.InvokeAsync(new AiPlayerChangeArgs { ChangeEventArgs = e, ModelNumber = Number })" />
            </div>
        </div>
    }
    else
    {
        <label for="@($"difficulty{Number}")">Difficulty:</label>
        <select id="@($"difficulty{Number}")" class="form-control " @onchange="(e) => OnAiPlayerChange.InvokeAsync(new AiPlayerChangeArgs { ChangeEventArgs = e, ModelNumber = Number })">
            @for (int i = 0; i < Model.ValidAiPlayers.Count; ++i)
            {
                <option value="@i">@Model.ValidAiPlayers[i].Name</option>
            }
        </select>

    }
}
@if (Number != 0)
{
    <div class="form-group form-check">
        <input type="checkbox" class="form-check-input" id="@($"checkAiPlayer{Number}")" @bind="Model.IsAiPlayer" @onclick="Click" />
        <label class="form-check-label" for="@($"checkAiPlayer{Number}")" @onclick="Click">Ai Player</label>
    </div>

}
@code {
    [Parameter] public int Number { get; set; }
    [Parameter]
    public PlayerSelectorModel Model { get; set; }

    [Parameter]
    public EventCallback<AiPlayerChangeArgs> OnAiPlayerChange { get; set; }
    [Parameter]
    public EventCallback<int> OnClick { get; set; }
    [Parameter]
    public EventCallback<AiPlayerChangeArgs> OnLevelChange { get; set; }

    [Parameter]
    public EventCallback<int> AddNew { get; set; }
    [Parameter]
    public EventCallback<int> RemoveLatest { get; set; }

    [Parameter]
    public EventCallback<int> OnFocusOut { get; set; }


    private string Selected(int index) => Model.SelectedAiPlayer == Model.ValidAiPlayers[index] ? "selected" : string.Empty;
    private void Click()
    {
        OnClick.InvokeAsync(Number);
    }



}
